// Simulera exakt fl√∂de som userscriptet skulle k√∂ra p√• SVD
const simulateUserScript = async () => {
    console.log('üîç SIMULERAR RIKTIGT TEST P√Ö SVD ARTIKEL');
    console.log('=======================================');
    
    // 1. Simulera paywall detection
    console.log('\n1. PAYWALL DETECTION:');
    const mockSVDPage = {
        meta: [
            { property: 'lp:paywall', content: 'hard' },
            { property: 'lp:type', content: 'premium' }
        ],
        elements: ['[data-paywall]', '.paywall-notice'],
        text: 'F√∂r att l√§sa hela artikeln, prenumerera p√• SVD'
    };
    
    // Exakt logik fr√•n userscript
    const paywallMeta = mockSVDPage.meta.find(m => m.property === 'lp:paywall' && m.content === 'hard');
    const premiumMeta = mockSVDPage.meta.find(m => m.property === 'lp:type' && m.content.includes('premium'));
    
    console.log('   Meta lp:paywall=hard:', paywallMeta ? '‚úÖ DETECTED' : '‚ùå NOT FOUND');
    console.log('   Meta lp:type=premium:', premiumMeta ? '‚úÖ DETECTED' : '‚ùå NOT FOUND');
    console.log('   Paywall elements:', mockSVDPage.elements.length > 0 ? '‚úÖ FOUND' : '‚ùå NOT FOUND');
    
    const isPaywalled = !!(paywallMeta || premiumMeta);
    console.log('   üéØ RESULT: PAYWALL', isPaywalled ? 'DETECTED ‚úÖ' : 'NOT FOUND ‚ùå');
    
    if (isPaywalled) {
        console.log('\n2. BUTTON CREATION:');
        console.log('   ‚úÖ Creating green "L√§s artikel" button');
        console.log('   ‚úÖ Position: top-right, 15s timer');
        
        console.log('\n3. API CALL TO LOCALHOST:8000:');
        // Simulera API call med fetch
        const mockApiData = {
            url: 'https://www.svd.se/a/xmE8p8/bingo-rimer-mot-sitt-livs-form-vid-50-min-adhd-som-turbo',
            title: 'Bingo rimer mot sitt livs form vid 50',
            site: 'svd.se'
        };
        console.log('   üì§ Sending:', JSON.stringify(mockApiData, null, 2));
        
        // Faktisk API call
        try {
            const fetch = (await import('node-fetch')).default;
            const response = await fetch('http://localhost:8000/api/v2/check-article', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(mockApiData)
            });
            
            if (response.ok) {
                const result = await response.json();
                console.log('   üì• Response SUCCESS');
                
                if (result.success) {
                    console.log('\n4. ARTICLE FOUND:');
                    console.log('   ‚úÖ Title:', result.result.pressreader_match.article.title);
                    console.log('   ‚úÖ Author:', result.result.pressreader_match.article.author);
                    console.log('   ‚úÖ Score:', result.result.match_score);
                    console.log('   ‚úÖ Strategy:', result.result.strategy_used);
                    
                    console.log('\n5. USER INTERACTION:');
                    console.log('   üñ±Ô∏è  User clicks "L√§s artikel" button');
                    console.log('   üîó Opens PressReader URL:', result.result.pressreader_match.article.url);
                    console.log('   üìñ User reads full article content');
                }
            }
        } catch (error) {
            console.log('   ‚ùå API Error:', error.message);
            console.log('   ‚ÑπÔ∏è  Trying fallback with curl...');
        }
    }
    
    console.log('\n‚úÖ SIMULERAT TEST SLUTF√ñRT!');
};

simulateUserScript().catch(console.error);